var searchIndex = JSON.parse('{\
"huffman":{"doc":"","t":"AAAFAFFFDDLLLLLLLMLLLLLLLLLLLMLLLLLLLLLMDLLLLFMMLLLLLLLLLLLLL","n":["compress","decompress","heap","main","parsing","build_frequency_list","heap_sort","main","Heap","Node","add_one","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","elt","eq","fmt","from","from","get_elt","get_value","into","into","is_empty","new","new","nodes","pop","push","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","Args","augment_args","augment_args_for_update","borrow","borrow_mut","check_command","command","compress","fmt","from","from_arg_matches","from_arg_matches_mut","get_command","into","into_app","into_app_for_update","try_from","try_into","type_id","update_from_arg_matches","update_from_arg_matches_mut"],"q":[[0,"huffman"],[5,"huffman::compress"],[8,"huffman::heap"],[40,"huffman::parsing"]],"d":["This module contains all the function to compress a text …","","This module contains some structs and implementations that …","","This module contains all things related to parsing command …","","","","Stores the nodes forming the heap.","An element of the heap, defined by its value and its elt.","","","","","","","","The stored value (here a char)","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if a heap is empty or bot.","Allows to create a new heap and returns it. The heap …","Allows to create a new node for the heap and returns it.","The nodes of the heap.","Removes and return the first element of the heap.","Add an element at the right place in the heap.","","","","","","","","For priority in the heap","","","","","","","Command [compress | decompress]","Compress text","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,2,9,2,9,2,2,2,2,2,2,9,2,2,2,9,2,9,9,2,9,9,9,2,9,2,9,2,9,2,2,0,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14],"f":[0,0,0,[[]],0,[1,[[3,[2]]]],[[[3,[2]]],[[3,[2]]]],[1,1],0,0,[2],[[]],[[]],[[]],[[]],[2,2],[[]],0,[[2,2],4],[[2,5],6],[[]],[[]],[2,7],[2,8],[[]],[[]],[9,4],[[],9],[[8,7],2],0,[9,[[11,[2,10]]]],[[9,2],9],[[]],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],0,0,[13,13],[13,13],[[]],[[]],[1,[[11,[10,10]]]],0,0,[[14,5],6],[[]],[15,[[11,[14,16]]]],[15,[[11,[14,16]]]],[14,10],[[]],[[],13],[[],13],[[],11],[[],11],[[],12],[[14,15],[[11,[16]]]],[[14,15],[[11,[16]]]]],"c":[],"p":[[15,"str"],[3,"Node"],[3,"Vec"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"char"],[15,"usize"],[3,"Heap"],[3,"String"],[4,"Result"],[3,"TypeId"],[6,"Command"],[3,"Args"],[3,"ArgMatches"],[3,"Error"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
