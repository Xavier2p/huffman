var searchIndex = JSON.parse('{\
"huffman":{"doc":"","t":"FADDDLLLLLLMMLLLLLLLMLLMLLLLLLLLLMM","n":["main","utils","BinTree","Element","Heap","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","elements","elt","from","from","from","into","into","into","is_empty","left","new","push","right","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","value"],"q":[[0,"huffman"],[2,"huffman::utils"]],"d":["","This file contains some structs and implementations that …","","An element of the heap, defined by its value and its elt.","Stores the elements forming the heap.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if a heap is empty or bot.","","Allows to create a new heap and returns it. The heap …","Add an element at the right place in the heap.","","","","","","","","","","","",""],"i":[0,0,0,0,0,6,1,3,6,1,3,1,3,6,1,3,6,1,3,1,6,1,1,6,6,1,3,6,1,3,6,1,3,6,3],"f":[[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[1,2],0,[[],1],[[1,3],1],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],0,0],"c":[],"p":[[3,"Heap"],[15,"bool"],[3,"Element"],[4,"Result"],[3,"TypeId"],[3,"BinTree"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
