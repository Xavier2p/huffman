var searchIndex = JSON.parse('{\
"huffman":{"doc":"","t":"AFFDDLLLLLLMLLLLLLLLLMLLLLLLLLLM","n":["heap","main","push","Heap","Node","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","elt","eq","fmt","from","from","into","into","is_empty","new","new","nodes","pop","push","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value"],"q":[[0,"huffman"],[3,"huffman::heap"]],"d":["This module contains some structs and implementations that …","","","Stores the nodes forming the heap.","An element of the heap, defined by its value and its elt.","","","","","","","The stored value (here a char)","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if a heap is empty or bot.","Allows to create a new heap and returns it. The heap …","Allows to create a new node for the heap and returns it.","The nodes of the heap.","Removes and return the first element of the heap.","Add an element at the right place in the heap.","","","","","","","","For priority in the heap"],"i":[0,0,0,0,0,5,1,5,1,1,1,1,1,1,5,1,5,1,5,5,1,5,5,5,1,5,1,5,1,5,1,1],"f":[0,[[]],[[]],0,0,[[]],[[]],[[]],[[]],[1,1],[[]],0,[[1,1],2],[[1,3],4],[[]],[[]],[[]],[[]],[5,2],[[],5],[[6,7],1],0,[5,[[9,[1,8]]]],[[5,1],5],[[]],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],0],"c":[],"p":[[3,"Node"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Heap"],[15,"usize"],[15,"char"],[3,"String"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
